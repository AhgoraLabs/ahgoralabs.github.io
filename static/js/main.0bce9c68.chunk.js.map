{"version":3,"sources":["helper/utils.js","components/DailyTimeline.js","components/DaysInfo.js","components/TimelineParser.js","components/Nightly.js","pages/bankCycle/style.js","components/hourCalculatorStyles.js","pages/bankCycle/index.js","helper/calculator.js","pages/hoursConverter/style.js","pages/hoursConverter/index.js","pages/multiplyingFactor/style.js","pages/multiplyingFactor/index.js","pages/hoursCalculator/styles.js","pages/hoursCalculator/index.js","pages/mainPage/index.js","pages/about/style.js","pages/about/img.jpg","styles/global.js","fonts/Roboto/Roboto-Regular.ttf","App.js","reportWebVitals.js","index.js"],"names":["moment","locale","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","styled","label","div","Container","ContainerRow","TextAreaNoResize","textarea","Label","Paragraph","p","Input","input","NightlyFactor","nightlyTime","setTime","calc","result","remove","handleOnChangeValue","target","value","name","isNaN","hours","onChange","minutes","readOnly","cols","rows","Object","keys","length","toString","padStart","Button","style","marginRight","variant","color","onClick","CicleBank","useState","bancoDeHoras","setBancoDeHoras","ciclo","setCiclo","setResult","currentDate","Date","monthValue","parseInt","e","id","type","disabled","banco","setMonth","getMonth","realDate","getFullYear","slice","console","log","marginBottom","mountResult","seconds","extractHoursFromSeconds","extractMinutesFromSeconds","sumHoursAndMinutes","map","hour","minute","normalizeHoursAndMinutes","reduce","acc","curr","removeUnderline","string","replaceAll","Math","floor","abs","HoursConverter","sexagesimal","setSexagesimal","centesimal","setCentesimal","handleChangeSexagesimal","time","split","converterToCentesimal","handleChangeCentesimal","round","converterToSexagesimal","mask","MultiplyingFactor","fator","setFator","totalSeconds","hoursToSeconds","hoursAndMinutes","factorMinutes","Modal","HoursCalculator","numberOfInputs","setNumberOfInputs","isSmallScreen","useMediaQuery","hoursInputRef","useRef","Array","minutesInputRef","doCalc","operation","current","elem","index","decreaseHoursAndMinutes","marginTop","minWidth","fontSize","fill","className","TextField","inputRef","element","filter","forEach","inputProps","useStyles","root","flexGrow","tab","textAlign","IndexPage","classes","handleChange","path","window","location","href","Paper","zIndex","Grid","container","item","xs","sm","Tab","paddingTop","to","Nightly","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bce9c68.chunk.js","sourcesContent":["import moment from \"moment\";\r\nimport \"moment/locale/pt-br\";\r\nmoment.locale(\"pt-br\");\r\nconst convertDate = (date, format) => moment(date).format(format);\r\n\r\nconst getWeeklyDay = (date) => {\r\n    const weeklyDay = moment(date).format(\"dddd\");\r\n    return `${weeklyDay.slice(0, 1).toLocaleUpperCase()}${weeklyDay.slice(1, weeklyDay.length)}`;\r\n};\r\n\r\nexport { convertDate, getWeeklyDay };\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { convertDate } from \"../helper/utils\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: \"absolute\",\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: \"2px solid #000\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst periodTypesTranslator = {\r\n    shift: \"Jornada\",\r\n    nightly: \"Noturno\",\r\n    punch: \"Batida\",\r\n    leave: \"Afastamento\",\r\n    tolerance: \"Tolerância\",\r\n    intinere: \"Intinere\",\r\n    onCalls: \"SobreAviso\",\r\n    businesshour: \"Expediente\",\r\n};\r\n\r\nconst BlockLabel = styled.label`\r\n    display: block;\r\n`;\r\n\r\nconst PeriodWrapper = styled.div`\r\n    #period {\r\n        padding-left: 20px;\r\n        .infos {\r\n            display: flex;\r\n            justify-content: space-between;\r\n\r\n            p {\r\n                color: black;\r\n                font-weight: 500;\r\n            }\r\n        }\r\n    }\r\n\r\n    #treatment {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-top: 10px;\r\n        label {\r\n            margin-top: 20px;\r\n            color: black;\r\n        }\r\n         p{\r\n            text-align: center;\r\n         }\r\n    }\r\n    #div-button-leaves {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst DailyTimeline = ({ timeline }) => {\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <PeriodWrapper>\r\n            <div id=\"period\">\r\n                <div className=\"infos\">\r\n                    <label>Inicio: </label>\r\n                    <p> {convertDate(timeline.startInfo, \"DD/MM/YYYY HH:mm\")} </p>\r\n                </div>\r\n                <div className=\"infos\">\r\n                    <label>Fim: </label>\r\n                    <p> {convertDate(timeline.endInfo, \"DD/MM/YYYY HH:mm\")} </p>\r\n                </div>\r\n            </div>\r\n            <div id=\"treatment\">\r\n                <label title=\"Gerará essa hora adicional caso esse período seja de batida\"> Tratamento caso trabalhado</label>\r\n                <p> {timeline.options?.shift?.DESC_TIPO_HORA} </p>\r\n                <label>Tipo do período </label>\r\n                <p>{timeline.type.map((type) => periodTypesTranslator[type]).join(\", \")} </p>\r\n            </div>\r\n\r\n            {timeline.type.includes(\"leave\") && (\r\n                <>\r\n                    <Modal open={open} onClose={handleClose} aria-labelledby=\"simple-modal-title\" aria-describedby=\"simple-modal-description\">\r\n                        <div style={modalStyle} className={classes.paper}>\r\n                            <BlockLabel>Motivo Afastamento: {`${timeline.options.leave.motivo}`}</BlockLabel>\r\n                            <BlockLabel>Tratamento: {`${timeline.options.leave.tratamento || 'Sem Tratamento'}`}</BlockLabel>\r\n                            <BlockLabel>Tratamento Noturno: {`${timeline.options.leave.tratamento_noturno  || 'Sem Tratamento'}`}</BlockLabel>\r\n                            <BlockLabel>Não abona: {`${timeline.options.leave.nao_abonar_falta}`}</BlockLabel>\r\n                            <BlockLabel>Abona apenas ausências: {`${timeline.options.leave.apenas_abonar_ausencia}`}</BlockLabel>\r\n                            <BlockLabel>Força o tratamento da jornada/escala: {`${timeline.options.leave.force_shift_limits}`}</BlockLabel>\r\n                            <BlockLabel>Possui limites: {`${timeline.options.leave?.LIMITES_HORAS_ADICIONAIS?.length > 0 || \"Não\"}`}</BlockLabel>\r\n                            {timeline.options.leave?.LIMITES_HORAS_ADICIONAIS?.length > 0 && (\r\n                                <>\r\n                                    <BlockLabel>Origem: {`${timeline.options.leave.LIMITES_HORAS_ADICIONAIS[0].HORA_ADICIONAL_ORIGEM}`}</BlockLabel>\r\n                                    <BlockLabel>Quantidade: {`${timeline.options.leave.LIMITES_HORAS_ADICIONAIS[0].TM_QUANTIDADE}`}</BlockLabel>\r\n                                    <BlockLabel>Destino: {`${timeline.options.leave.LIMITES_HORAS_ADICIONAIS[0].HORA_ADICIONAL_DESTINO}`}</BlockLabel>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </Modal>\r\n                    <div id=\"div-button-leaves\">\r\n                        <Button id='button-afastamento' style={{marginTop: 20}} variant=\"outlined\" color=\"primary\" onClick={handleOpen}>Ver dados Afastamento</Button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </PeriodWrapper>\r\n    );\r\n};\r\n\r\nexport default DailyTimeline;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DailyTimeline from \"./DailyTimeline\";\r\nimport { convertDate, getWeeklyDay } from \"../helper/utils\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/pt-br\";\r\nmoment.locale(\"pt-br\");\r\n\r\nconst Card = styled.div`\r\n    border: 1px solid lightgray;\r\n    box-shadow: 0 0 3px 1px lightgray;\r\n    background-color: #797cfd;\r\n    border-radius: 30px;\r\n    min-width: 300px;\r\n    height: auto;\r\n    font-size: 20px;\r\n    margin: 5px 10px;\r\n    margin-top: 20px;\r\n    color: #545454;\r\n`;\r\n\r\nconst CardHeader = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: linear-gradient(to top, #797cfd, #9c9efe);\r\n    border-radius: 30px 30px 0px 0px;\r\n    color: white;\r\n    padding: 5px 0px;\r\n\r\n    #date {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        border-radius: 30px;\r\n        padding: 3px;\r\n        #weeklyday {\r\n            min-width: 130px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n        label {\r\n            margin: 5px;\r\n            padding: 5px;\r\n            border-radius: 15px;\r\n            padding: 5px;\r\n        }\r\n        label + label {\r\n            background: white;\r\n            color: gray;\r\n        }\r\n    }\r\n`;\r\n\r\nconst CardInfo = styled.div`\r\n    background: white;\r\n    border-radius: 30px 30px 0px 0px;\r\n    padding-top: 10px;\r\n    h4 {\r\n        color: gray;\r\n    }\r\n\r\n    #hours {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    #infos {\r\n        display: flex;\r\n        flex-direction: column;\r\n        h4 {\r\n            margin-left: 20px;\r\n            margin-top: 20px;\r\n            margin-bottom: 5px;\r\n            color: #454545;\r\n        }\r\n\r\n        div {\r\n            margin-left: 40px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-right: 30px;\r\n\r\n            label {\r\n                color: black;\r\n                weight: bold;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst CardPeriods = styled.div`\r\n    padding-top: 30px;\r\n    background: white;\r\n    height: 94%;\r\n    border-bottom: 1px solid lightgray;\r\n    border-radius: 0px 0px 30px 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    #punchesInTolerance {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        min-height: 60px;\r\n        margin-bottom: 20px;\r\n        label {\r\n            margin-bottom: 5px;\r\n        }\r\n        label + label {\r\n            text-align: center;\r\n        }\r\n    }\r\n`;\r\n\r\nconst DayInfo = ({ day, timeline }) => {\r\n    const shiftIndex = day.jornada ?? null;\r\n    const shiftData = timeline.shifts[shiftIndex];\r\n    const contractualHour = shiftData?.ops.HORAS_CONTRATUAIS.join(\" - \") || \"Não há horas previstas\";\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <div id=\"date\">\r\n                    <label>{convertDate(day.dia, \"DD/MM/YYYY\")}</label>\r\n                    <label id=\"weeklyday\">{getWeeklyDay(day.dia)}</label>\r\n                </div>\r\n            </CardHeader>\r\n\r\n            <CardInfo>\r\n                <div id=\"hours\">\r\n                    <label> Horário contratual </label>\r\n                    <label> {contractualHour} </label>\r\n                </div>\r\n                <div id=\"infos\">\r\n                    <h4>Neste dia</h4>\r\n                    <div>\r\n                        <p>Há feriado? </p>\r\n                        <label> {day.events.isHoliday ? \"Sim\" : \"Não\"} </label>\r\n                    </div>\r\n                    <div>\r\n                        <p>Há afastamento? </p>\r\n                        <label> {day.events.leave.range ? \"Sim\" : \"Não\"} </label>\r\n                    </div>\r\n                </div>\r\n            </CardInfo>\r\n\r\n            <CardPeriods>\r\n                <hr style={{ width: \"90%\", color: \"lightgray\", marginBottom: 10 }} />\r\n                <div id=\"punchesInTolerance\">\r\n                    <label>Batidas na tolerância</label>\r\n                    <label> {day.punchesInTolerance.map((punch) => moment(punch.hora, \"HHmm\").format(\"HH:mm\")).join(\" - \")}</label>\r\n\r\n                </div>\r\n\r\n                {day.timeline.map((timeline, index) => (\r\n                    <div>\r\n                        <hr/>\r\n                        <br />\r\n                        <h4>Período {index + 1}</h4>\r\n                        <DailyTimeline timeline={timeline} />\r\n                        <br />\r\n                    </div>\r\n                ))}\r\n            </CardPeriods>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default DayInfo;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DayInfo from \"./DaysInfo\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst ContainerJson = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 90vw;\r\n    margin-top: 30px;\r\n\r\n\r\n    #title{\r\n        color: #656565;\r\n        margin-bottom: 40px;\r\n        margin-top: 10px;\r\n    }\r\n`;\r\n\r\nconst ContainerTimeLine = styled.div`\r\n\r\n    #header {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        position: fixed;\r\n        z-index: 1;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        width: 100%;\r\n        background-color: white;\r\n        border-bottom: 1px solid lightgray;\r\n        padding: 14px 0px;\r\n        border-radius: 10px;\r\n        h1 {\r\n            display: flex;\r\n            color: #787878;\r\n\r\n            p {\r\n                margin-left: 30px;\r\n                color: black;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst ContainerDays = styled.div`\r\n    display: flex;\r\n    padding-top: 50px;\r\n`;\r\n\r\nconst Timeline = () => {\r\n    const [timeline, setTimeline] = useState({});\r\n\r\n    const handleOnChange = (e) => {\r\n        const { value } = e.target;\r\n        setTimeline(JSON.parse(value));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {Object.keys(timeline).length === 0 && (\r\n                <ContainerJson>\r\n                    <h1 id='title'>Cole o json da timeline no campo abaixo para gerar a leitura.</h1>\r\n                    <textarea onChange={handleOnChange} style={{marginLeft:130, padding: '20px 20px', fontSize: 20}} rows=\"20\" cols=\"120\" placeholder=\"Cole o Json da timeline aqui\" />\r\n                    <Button style={{ display: \"block\", marginTop: 25, width: \"40vw\" }} variant=\"contained\" color=\"primary\">\r\n                        Parse Timeline\r\n                    </Button>\r\n                </ContainerJson>\r\n            )}\r\n\r\n            {Object.keys(timeline).length !== 0 && (\r\n                <ContainerTimeLine>\r\n                    <div id=\"header\">\r\n                        <h1>\r\n                            Período:{\" \"}\r\n                            <p>\r\n                                {timeline.period.slice(4, 6)} / {timeline.period.slice(0, 4)}\r\n                            </p>\r\n                        </h1>\r\n                        <h1>\r\n                            Período está bloqueado?<p>{timeline.blocked ? \"Sim\" : \"Não\"}</p>\r\n                        </h1>\r\n                        <h1>\r\n                            Utiliza sindicato?<p>{timeline.groupOfRules.length ? \"Sim\" : \"Não\"}</p>\r\n                        </h1>\r\n                    </div>\r\n\r\n                    <ContainerDays>\r\n                        {timeline.daysInfos.map((day) => (\r\n                            <DayInfo day={day} timeline={timeline} />\r\n                        ))}\r\n                    </ContainerDays>\r\n                </ContainerTimeLine>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Timeline;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin: auto;\r\n    font-family: 'Lucida Sans Unicode','Lucida Grande',sans-serif;\r\n    font-size: 13px;\r\n    color: #757575;\r\n    width: 80%; // Define a largura do container\r\n\r\n    h1 {\r\n        margin-top: 30px;\r\n        font-size: 40px;\r\n    }\r\n`\r\n\r\n\r\nconst ContainerRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-bottom: 20px;\r\n    margin-top: 25px;\r\n`\r\n\r\nconst TextAreaNoResize = styled.textarea`\r\n    resize: none;\r\n`\r\n\r\nconst Label = styled.label`\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nconst Paragraph = styled.p`\r\n    text-align: left;\r\n    font-size: 20px;\r\n`\r\n\r\nconst Input = styled.input`\r\n    max-width: 70px;\r\n    text-align: center;\r\n    height: 30px;\r\n    margin-right: 20px;\r\n    border: 1px solid #919191\r\n`\r\n\r\nconst NightlyFactor = ({nightlyTime, setTime, calc, result, remove}) => {\r\n    const handleOnChangeValue = ({target: {value, name}}) => {\r\n        if(isNaN(value)) return;\r\n\r\n        setTime(nightlyTime => ({\r\n            ...nightlyTime,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Container>\r\n            <h1>Calculadora de adicional noturno</h1>\r\n            <ContainerRow>\r\n            <Label> Horas</Label>\r\n            <Input  name='hours' value={nightlyTime?.hours || ''} onChange={handleOnChangeValue}/>\r\n            <Label> Minutos</Label>\r\n            <Input name='minutes' value={nightlyTime?.minutes || ''} onChange={handleOnChangeValue} />\r\n        </ContainerRow>\r\n            <TextAreaNoResize\r\n                 readOnly\r\n                 cols='100'\r\n                 rows='10'\r\n                 value={\r\n                    result && Object.keys(result).length\r\n                        ? `O resultado da operação é ${result.hours.toString().padStart(2, 0)}:${result.minutes.toString().padStart(2, 0)}`\r\n                        : ''\r\n                }\r\n            />\r\n            <ContainerRow>\r\n                <Button style={{marginRight: 20}} variant=\"contained\" color=\"primary\" onClick={calc}>\r\n                    Adicional Noturno\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={remove}>\r\n                    Remover adicional noturno\r\n                </Button>\r\n            </ContainerRow>\r\n\r\n            \r\n            <Paragraph>\r\n                Vamos considerar um exemplo prático para entender melhor como funciona o cálculo da hora noturna reduzida. Suponha que um trabalhador tenha trabalhado 7 horas durante o período noturno. Em uma situação normal, essas 7 horas seriam equivalentes a 420 minutos (7 horas * 60 minutos). No entanto, para o cálculo do adicional noturno, a hora é considerada como 52 minutos e 30 segundos. Portanto, para converter esses 420 minutos em horas noturnas reduzidas, nós dividimos os 420 minutos por 52,5 minutos (que é o equivalente em minutos de 52 minutos e 30 segundos). O resultado dessa divisão é 8 horas. Portanto, para fins de cálculo do adicional noturno, as 7 horas trabalhadas no período noturno são consideradas como 8 horas. Isso significa que o trabalhador receberá o pagamento equivalente a 8 horas de trabalho, mesmo tendo trabalhado efetivamente 7 horas.\r\n            </Paragraph>\r\n\r\n\r\n        </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NightlyFactor;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #676767;\r\n    width: 80%;\r\n    margin: auto;\r\n    margin-top: 30px;\r\n    flex-direction: column;\r\n\r\n    div {\r\n        margin-top: 30px;\r\n\r\n        div {\r\n            margin-bottom: 0px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n\r\n\r\n            input{\r\n                height: 40px;\r\n                margin-left: 40px;\r\n                font-size: 20px;\r\n                text-align: center;\r\n                width: 200px; // Adicione uma largura fixa aqui\r\n            }\r\n        }\r\n    }\r\n\r\n    #result{\r\n        padding: 5px;\r\n        margin-bottom: 20px;\r\n        height: 50px;\r\n    }\r\n`\r\n\r\nexport const Paragraph = styled.p`\r\n    text-align: left;\r\n    font-size: 20px;\r\n`\r\n","\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    h1 {\r\n        margin-top: 30px;\r\n        color: #656565;\r\n    }\r\n`\r\n\r\nconst Modal = styled.div`\r\n    text-align: center;\r\n    height: 398px;\r\n    width: 600px;\r\n    left: 60%;\r\n    margin: auto;\r\n    border:  1px solid black;\r\n    background-color:  #f1f1f1;\r\n    font-family: 'Lucida Sans Unicode','Lucida Grande',sans-serif;\r\n    font-size: 13px;\r\n    color: #757575;\r\n    margin-top: 30px;\r\n`\r\n\r\nconst InputHour = styled.input`\r\n    text-align: center;\r\n    border: 1px #042e5d solid;\r\n    width: 82px;\r\n    height: 50px;\r\n    margin: 10px;\r\n    font-size: 30px;\r\n`\r\nconst InputHourResult = styled.input`\r\n    border: 1px #042e5d solid;\r\n    width: 82px;\r\n    height: 50px;\r\n    text-align:center;\r\n    font-size: 30px;\r\n    background-color: #283593;\r\n    color: white;\r\n    margin: 10px;\r\n`\r\n\r\nconst ContainerHour = styled.div`\r\n    text-align: center;\r\n    margin-left: 10px;\r\n    font-size: 30px;\r\n    padding: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n`\r\n\r\nconst LabelHour = styled.label`\r\n    color: #fff;\r\n    letter-spacing: 3pt;\r\n    font-size: 15px;\r\n    padding: 10px;\r\n    text-shadow: 0 1px 0 rgba(255,255,255,0.2);\r\n    border: 1px #fcfcfc solid;\r\n    border-radius: 10px;\r\n    margin-left: 15px;\r\n    cursor: pointer;\r\n`\r\nexport {Container, InputHour, InputHourResult, ContainerHour, LabelHour, Modal}","import Button from \"@material-ui/core/Button\";\r\nimport React, { useState } from \"react\";\r\nimport { Container, Paragraph } from \"./style.js\";\r\n\r\nconst CicleBank = () => {\r\n    const [bancoDeHoras, setBancoDeHoras] = useState();\r\n    const [ciclo, setCiclo] = useState();\r\n    const [result, setResult] = useState();\r\n\r\n    const currentDate = new Date(bancoDeHoras);\r\n    const month = ciclo;\r\n    const monthValue = parseInt(month);\r\n\r\n    const handleClick = () => {\r\n        if (!bancoDeHoras || !ciclo) return false;\r\n        const banco = currentDate;\r\n        banco.setMonth(banco.getMonth()+monthValue);\r\n        const year = currentDate.getFullYear();\r\n        \r\n        const filterMonth = (\"0\" + (banco.getMonth() + 1)).slice(-2);\r\n        \r\n        const realDate = year + '-' + filterMonth\r\n        setResult(realDate);\r\n        console.log(realDate)\r\n    };\r\n    return (\r\n        <Container>\r\n            <h1>Ciclo Banco de Horas</h1>\r\n            <div>\r\n                <div>\r\n                    <h3>Inicio do Banco</h3>\r\n                    <input onChange={(e) => setBancoDeHoras(e.target.value)} id='month' type=\"month\"/>\r\n                </div>\r\n                <div>\r\n                    <h3>Valor do Ciclo </h3>\r\n                    <input onChange={(e) => setCiclo(e.target.value)}/>\r\n                </div>\r\n                <div>\r\n                    <h3>Final do Ciclo</h3>\r\n                    <input onChange={(e) => setCiclo(e.target.value)}  type=\"month\" id='result' disabled value={result}/>\r\n                </div>\r\n            </div>\r\n\r\n            <Button onClick={handleClick} variant=\"contained\" color=\"primary\" style={{ marginBottom: 50 }}>\r\n                Calcular\r\n            </Button>\r\n            <p>Calcule o ciclo de banco de horas</p>\r\n        <br/>\r\n            <Paragraph>\r\n                O ciclo de banco de horas é o período de tempo durante o qual as horas extras trabalhadas são acumuladas e compensadas. Este período pode variar dependendo do acordo de trabalho, mas geralmente é de um ano. Durante este ciclo, todas as horas extras que o trabalhador realiza são registradas e acumuladas no banco de horas. Ao final do ciclo, o trabalhador deve ter compensado todas as horas extras acumuladas, seja por meio de folgas ou pagamento adicional. Se ao final do ciclo ainda houver horas extras não compensadas, a empresa deve pagar ao trabalhador estas horas com o acréscimo correspondente. O ciclo de banco de horas é uma ferramenta importante para gerenciar as horas de trabalho e garantir que os trabalhadores sejam justamente compensados por qualquer trabalho extra que realizem.\r\n            </Paragraph>\r\n\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CicleBank;\r\n","const mountResult = seconds => ({hours: extractHoursFromSeconds(seconds), minutes: extractMinutesFromSeconds(seconds)});\r\n\r\nconst normalizeHoursAndMinutes = (hours, minutes) => [...hours.map(hour => hour * 3600), ...minutes.map(minute => minute * 60)];\r\n\r\nconst sumHoursAndMinutes = ({hours, minutes}) => mountResult(normalizeHoursAndMinutes(hours, minutes).reduce((acc, curr) => acc + curr, 0));\r\n\r\nconst decreaseHoursAndMinutes = ({hours, minutes}) => mountResult(hours.map((hour, index) =>  hour * 3600 + minutes[index] * 60).reduce((acc, curr) => acc - curr));\r\n    //Aqui tem que ver bem , pois existem vários comportamentos possíveis ( e não errados ) para uma subtração em massa.\r\n\r\n// const sum = ({ hour1 = 0, hour2 = 0, minute1 = 0, minute2 = 0 }) => {\r\n//     const sumHours = hourToSeconds(hour1) + hourToSeconds(hour2);\r\n//     const sumMinutes = minutesToSeconds(minute1) + minutesToSeconds(minute2);\r\n//     return mountResult(sumHours + sumMinutes);\r\n// };\r\n\r\n// const decrease = ({ hour1 = 0, hour2 = 0, minute1 = 0, minute2 = 0 }) => {\r\n//     const sumFirstLine = hourToSeconds(hour1) + minutesToSeconds(minute1);\r\n//     const sumSecondLine = hourToSeconds(hour2) + minutesToSeconds(minute2);\r\n\r\n//     return mountResult(sumFirstLine - sumSecondLine);\r\n// };\r\n\r\nconst reset = (setTime) => {\r\n    setTime({});\r\n    return {};\r\n};\r\n\r\nconst calcNightlyFactor = ({ hours, minutes }) => {\r\n    const minutesInSeconds = minutes ? minutesToSeconds(minutes) : 0;\r\n    const totalSeconds = hours ? hourToSeconds(hours) + minutesInSeconds : minutesInSeconds;\r\n\r\n    return !minutesInSeconds && !totalSeconds ? {} : mountResult(totalSeconds * getNightlyFactor());\r\n};\r\n\r\nconst removeNightlyFactor = ({ hours, minutes }) => {\r\n    const minutesInSeconds = minutes ? minutesToSeconds(minutes) : 0;\r\n    const totalSeconds = hours ? hourToSeconds(hours) + minutesInSeconds : minutesInSeconds;\r\n\r\n    return !minutesInSeconds && !totalSeconds ? {} : mountResult(Math.ceil(totalSeconds / getNightlyFactor()));\r\n};\r\n\r\nconst converterToCentesimal = time => {\r\n    if (!time) return false;\r\n    const [hours, minutes] = removeUnderline(time).split(\":\");\r\n    return `${hours}.${Math.floor(minutes * 1.67)}`;\r\n};\r\n\r\nconst converterToSexagesimal = time => {\r\n    if (!time) return false;\r\n    let [hours, minutes] = removeUnderline(time).split(\".\");\r\n    return `${hours}:${Math.round(minutes / 1.67)\r\n        .toString()\r\n        .padStart(2, 0)}`;\r\n};\r\n\r\nconst secondsToHoursAndMinutes = (totalSeconds) => {\r\n    return `${extractHoursFromSeconds(totalSeconds).toString().padStart(2, 0)}:${extractMinutesFromSeconds(totalSeconds).toString().padStart(2, 0)}`;\r\n};\r\n\r\nconst hourToSeconds = hour => hour * 3600;\r\n\r\nconst minutesToSeconds = minutes => minutes * 60;\r\n\r\nconst removeUnderline = string => string.replaceAll(\"_\", \"0\");\r\n\r\nconst extractHoursFromSeconds = seconds => seconds > 0 ? Math.floor(seconds / 3600) : Math.floor(Math.abs(seconds) / 3600) * -1; \r\n\r\nconst extractMinutesFromSeconds = seconds => seconds > 0 ?  Math.floor((seconds % 3600) / 60) :  Math.floor((Math.abs(seconds) % 3600) / 60) * -1;\r\n\r\nconst getNightlyFactor = () => 8 / 7;\r\n\r\nexport {reset, extractHoursFromSeconds, extractMinutesFromSeconds, calcNightlyFactor, removeNightlyFactor, converterToCentesimal, converterToSexagesimal, secondsToHoursAndMinutes, removeUnderline, sumHoursAndMinutes, decreaseHoursAndMinutes };\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #676767;\r\n    width: 80%; // Ajuste este valor conforme necessário\r\n    margin: auto;\r\n    margin-top: 30px;\r\n    flex-direction: column;\r\n\r\n    div {\r\n        margin: 20px 0px;\r\n\r\n        div {\r\n            margin-bottom: 30px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n            width: 40vw;\r\n\r\n            input{\r\n                height: 40px;\r\n                font-size: 20px;\r\n                text-align: center;\r\n                margin-left: 20px;\r\n            }\r\n            h3 {\r\n                margin-left: 30px;\r\n\r\n            }\r\n\r\n            div +div {\r\n                width: 10vw;\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React, { useState } from \"react\";\r\nimport InputMask from \"react-input-mask\";\r\nimport { converterToCentesimal, converterToSexagesimal } from \"../../helper/calculator\";\r\nimport { Container } from \"./style.js\";\r\nimport styled from 'styled-components';\r\n\r\nconst Paragraph = styled.p`\r\n    text-align: left;\r\n    font-size: 20px;\r\n`\r\n\r\nconst HoursConverter = () => {\r\n    const [sexagesimal, setSexagesimal] = useState(\"00:00\");\r\n    const [centesimal, setCentesimal] = useState(\"0.00\");\r\n\r\n    const handleChangeSexagesimal = (e) => setSexagesimal(converterToCentesimal(e.target.value));\r\n    const handleChangeCentesimal = (e) => setCentesimal(converterToSexagesimal(e.target.value));\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Conversor de Horas</h1>\r\n            <div>\r\n                <div>\r\n                    <div>\r\n                        <h2>Valor em Sexagesimal </h2>\r\n                        <InputMask onChange={(e) => handleChangeSexagesimal(e)} mask=\"99:99\"></InputMask>\r\n                    </div>\r\n                    <div>\r\n                        <h3>{sexagesimal}</h3>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <h2>Valor em Centesimal </h2>\r\n                        <InputMask onChange={(e) => handleChangeCentesimal(e)} mask=\"99.99\"></InputMask>\r\n                    </div>\r\n                    <div>\r\n                        <h3>{centesimal}</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <p>*Converta horas de sexagesimal para centesimal e vice versa</p>\r\n            <br/>\r\n            <Paragraph>\r\n                A conversão de horas no formato sexagesimal (base 60) para o formato centesimal (base 100) é um processo comum em cálculos de tempo, especialmente em contextos de trabalho. Para converter horas sexagesimais em centesimais, você divide os minutos por 60 e adiciona o resultado às horas. Por exemplo, se você tem 1 hora e 30 minutos no formato sexagesimal, você divide 30 (minutos) por 60, o que resulta em 0,5. Adicionando isso à 1 hora, você obtém 1,5 horas no formato centesimal. Para converter de centesimal para sexagesimal, você faz o processo inverso. Se você tem 1,5 horas no formato centesimal, você subtrai a parte inteira (1 hora), deixando 0,5. Multiplicando 0,5 por 60, você obtém 30 minutos. Portanto, 1,5 horas no formato centesimal é igual a 1 hora e 30 minutos no formato sexagesimal.\r\n            </Paragraph>\r\n\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default HoursConverter;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #676767;\r\n    width: 80%;\r\n    margin: auto;\r\n    margin-top: 30px;\r\n    flex-direction: column;\r\n\r\n    div {\r\n        margin-top: 30px;\r\n\r\n        div {\r\n            margin-bottom: 0px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n\r\n\r\n            input{\r\n                height: 40px;\r\n                margin-left: 40px;\r\n                font-size: 20px;\r\n                text-align: center;\r\n            }\r\n        }\r\n    }\r\n\r\n    #result{\r\n        padding: 5px;\r\n        margin-bottom: 20px;\r\n        height: 50px;\r\n    }\r\n`\r\n\r\nexport const Paragraph = styled.p`\r\n    text-align: left;\r\n    font-size: 20px;\r\n`\r\n","import Button from \"@material-ui/core/Button\";\r\nimport React, { useState } from \"react\";\r\nimport InputMask from \"react-input-mask\";\r\nimport { removeUnderline, secondsToHoursAndMinutes } from \"../../helper/calculator\";\r\nimport { Container, Paragraph } from \"./style.js\";\r\n\r\nconst MultiplyingFactor = () => {\r\n    const [bancoDeHoras, setBancoDeHoras] = useState();\r\n    const [fator, setFator] = useState();\r\n    const [result, setResult] = useState();\r\n\r\n    const hoursToSeconds = ([hour, minutes]) => parseInt(hour) * 3600 + parseInt(minutes) * 60;\r\n\r\n    const factorMinutes = (seconds) => removeUnderline(fator) * seconds;\r\n\r\n    const handleClick = () => {\r\n        if (!bancoDeHoras || !fator) return false;\r\n\r\n        const seconds = hoursToSeconds(removeUnderline(bancoDeHoras).split(\":\"));\r\n        const hoursAndMinutes = secondsToHoursAndMinutes(factorMinutes(seconds));\r\n        setResult(hoursAndMinutes);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Fator Multiplicador</h1>\r\n            <div>\r\n                <div>\r\n                    <h3>Quantidade de Banco</h3>\r\n                    <InputMask onChange={(e) => setBancoDeHoras(e.target.value)} mask=\"99:99\"></InputMask>\r\n                </div>\r\n                <div>\r\n                    <h3>Fator Multiplicador </h3>\r\n                    <InputMask onChange={(e) => setFator(e.target.value)} mask=\"9.9\"></InputMask>\r\n                </div>\r\n            </div>\r\n            <div id=\"result\">{result && <h1>Resultado: {result}</h1>}</div>\r\n            <Button onClick={handleClick} variant=\"contained\" color=\"primary\" style={{ marginBottom: 50 }}>\r\n                Multiplicar\r\n            </Button>\r\n            <p>*Multiplique o banco pelo fator multiplicador</p>\r\n\r\n            <br/>\r\n            <Paragraph>\r\nO fator multiplicador é um elemento crucial no cálculo do banco de horas. Ele é usado para determinar o valor das horas extras trabalhadas em relação às horas normais de trabalho. Por exemplo, a legislação trabalhista brasileira estabelece que as primeiras duas horas extras trabalhadas devem ser pagas com um acréscimo de 50% sobre o valor da hora normal, e as horas extras além dessas devem ser pagas com um acréscimo de 100%. Isso significa que o fator multiplicador para as primeiras duas horas extras é 1,5 (ou 150%), e para as horas extras além dessas é 2 (ou 200%). Portanto, se um trabalhador que recebe R$20,00 por hora trabalha 3 horas extras, as duas primeiras horas extras serão pagas a R$30,00 cada (R$20,00 * 1,5) e a terceira hora extra será paga a R$40,00 (R$20,00 * 2). O fator multiplicador é uma ferramenta importante para garantir que os trabalhadores sejam justamente compensados pelas horas extras que trabalham.\r\n</Paragraph>\r\n\r\n\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default MultiplyingFactor;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    padding-top: 30px;\r\n    color: #898989;\r\n`;\r\n\r\nexport const Modal = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    @media (max-width: 600px) {\r\n        width: 80vw;\r\n    }\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    width: 40vw;\r\n    border: 1px solid lightgray;\r\n    box-shadow: 0 0 10px lightgray;\r\n    padding: 30px;\r\n    margin-top: 20px;\r\n    background: whitesmoke;\r\n\r\n    hr {\r\n        width: 80%;\r\n        color: #898989;\r\n        margin-top: 30px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    #div-addNewButtons {\r\n        width: 60%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        justify-content: space-around;\r\n        @media (max-width: 600px) {\r\n            flex-direction: column;\r\n            button {\r\n                margin-bottom: 10px;\r\n            }\r\n        }\r\n    }\r\n\r\n    #div-all-input-hours {\r\n        margin-top: 20px;\r\n        width: 80%;\r\n\r\n        .div-input-hours {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-evenly;\r\n            margin-bottom: 10px;\r\n            input {\r\n                background-color: white;\r\n            }\r\n            @media (max-width: 600px) {\r\n                flex-direction: column;\r\n                input {\r\n                    margin-bottom: 10px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    #div-buttons {\r\n        margin-top: 30px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-around;\r\n        width: 70%;\r\n        @media (max-width: 600px) {\r\n            flex-direction: column;\r\n            button {\r\n                margin-bottom: 10px;\r\n            }\r\n        }\r\n    }\r\n\r\n    #div-results {\r\n        width: 80%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-around;\r\n        margin-top: 10px;\r\n        input {\r\n            background-color: ghostwhite;\r\n        }\r\n        @media (max-width: 600px) {\r\n            flex-direction: column;\r\n            input {\r\n                margin-bottom: 10px;\r\n            }\r\n        \r\n    }\r\n`;\r\n","import { Button, TextField, useMediaQuery  } from \"@material-ui/core\";\r\nimport { useRef, useState } from \"react\";\r\nimport { decreaseHoursAndMinutes, sumHoursAndMinutes } from '../../helper/calculator';\r\nimport { Container, Modal } from \"./styles\";\r\n\r\nfunction HoursCalculator() {\r\n    const [numberOfInputs, setNumberOfInputs] = useState(2);\r\n    const isSmallScreen = useMediaQuery('(max-width:600px)'); // returns true if screen width is 600px or less\r\n    const [result, setResult] = useState({hours: '', minutes: ''})\r\n\r\n    const hoursInputRef = useRef(new Array());\r\n    const minutesInputRef = useRef(new Array());\r\n\r\n    const resetFields = () => {\r\n        [...hoursInputRef.current, ...minutesInputRef.current].filter(value => value).forEach(elem => elem.value = '');\r\n        setResult({hours: '', minutes: ''})\r\n    };\r\n\r\n    const handleAddNewInputs = () => numberOfInputs === 31 || setNumberOfInputs(numberOfInputs + 1);\r\n\r\n    const handleRemoveLastInput = () => setNumberOfInputs(2);\r\n\r\n    const doCalc = (operation) => {\r\n        const hours = hoursInputRef.current.map(elem => elem?.value ? parseInt(elem.value) : 0);\r\n        const minutes = minutesInputRef.current.map(elem => elem?.value ? parseInt(elem.value) : 0);\r\n        setResult(operation === \"sum\" ? sumHoursAndMinutes({hours, minutes}) : decreaseHoursAndMinutes({hours, minutes}));\r\n    };\r\n\r\n    return (\r\n        <Container style={{ marginTop: isSmallScreen ? '60%' : 0 }}> {/* Add margin-top here */}\r\n            <h1>Calculadora de Horas</h1>\r\n            <Modal>\r\n                <div id=\"div-addNewButtons\">\r\n                <Button style={{ backgroundColor: \"#a2cf6e\", color: \"white\", minWidth: 147 }} onClick={handleAddNewInputs} variant=\"contained\">+</Button>\r\n                <Button style={{ backgroundColor: \"tomato\", color: \"white\", minWidth: 147, fontSize: '0.8rem' }} onClick={handleRemoveLastInput} variant=\"contained\">Limpar campos</Button>\r\n\r\n\r\n                </div>\r\n                <div id=\"div-all-input-hours\">\r\n                    {new Array(numberOfInputs).fill(0).map((elem, index) => {\r\n                        return (\r\n                            <div className=\"div-input-hours\" key={index}>\r\n                                <TextField inputRef={(element) => (hoursInputRef.current[index] = element)} className=\"outlined-basic\" label=\"Horas\" variant=\"outlined\" />\r\n                                <TextField inputRef={(element) => (minutesInputRef.current[index] = element)} className=\"outlined-basic\" label=\"Minutos\" variant=\"outlined\" />\r\n                            </div>\r\n                        )})}\r\n                </div>\r\n                <div id=\"div-buttons\">\r\n                    <Button onClick={() => doCalc('sum')} variant=\"contained\" color=\"primary\">Adição</Button>\r\n                    <Button onClick={() => resetFields(\"reset\")} variant=\"contained\" color=\"secondary\">Reset</Button>\r\n                    <Button onClick={() => doCalc('decrease')} variant=\"contained\" color=\"primary\">Subtração</Button>\r\n                </div>\r\n                <hr />\r\n                <h1>Resultado</h1>\r\n                <div id=\"div-results\">\r\n                    <TextField id=\"filled-basic\"  inputProps={{ readOnly: true }}  variant=\"outlined\" label='Resultado Horas' value={result.hours} />\r\n                    <TextField id=\"filled-basic\" inputProps={{ readOnly: true }}  variant=\"outlined\" label='Resultado Minutos' value={result.minutes}  />\r\n                </div>\r\n            </Modal>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HoursCalculator;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\r\n\r\n//components\r\nimport TimelineParser from \"../../components/TimelineParser\";\r\nimport Nightly from \"../../components/Nightly\";\r\nimport HourCalculator from \"../../components/HourCalculator\";\r\n\r\n//pages\r\nimport CicleBank from \"../../pages/bankCycle\";\r\nimport HoursConverter from \"../../pages/hoursConverter\";\r\nimport MultiplyingFactor from \"../../pages/multiplyingFactor\";\r\nimport HoursCalculator from \"../../pages/hoursCalculator\";\r\nimport About from \"../../pages/about\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    tab: {\r\n        textAlign: 'center',\r\n    }\r\n});\r\n\r\nconst IndexPage = () => {\r\n    const classes = useStyles();\r\n    const handleChange = (path) => {\r\n        window.location.href = path;\r\n    };\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Paper className={classes.root} style={{ position: \"fixed\", width: \"100vw\", zIndex: 1 }}>\r\n                <Container> \r\n                <Grid container>\r\n                    <Grid item xs={12} sm={2}>\r\n                        <Tab className={classes.tab} label=\"Calculadora\" onClick={() => handleChange(\"/calculadora\")} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={2}>\r\n                        <Tab className={classes.tab} label=\"Adicional Noturno\" onClick={() => handleChange(\"/adicional-noturno\")} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={2}>\r\n                        <Tab className={classes.tab} label=\"Conversor\" onClick={() => handleChange(\"/conversor\")} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={2}>\r\n                        <Tab className={classes.tab} label=\"Fator Multiplicador\" onClick={() => handleChange(\"/fator-multiplicador\")} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={2}>\r\n                        <Tab className={classes.tab} label=\"Banco de Horas\" onClick={() => handleChange(\"/banco-de-horas\")} />\r\n                    </Grid>\r\n                </Grid>\r\n                </Container>\r\n            </Paper>\r\n            <div style={{ paddingTop: 49 }}>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Navigate to=\"/calculadora\" />} />\r\n                    <Route path=\"/calculadora\" element={<HoursCalculator />} />\r\n                    <Route path=\"/adicional-noturno\" element={<Nightly />} />\r\n                    <Route path=\"/conversor\" element={<HoursConverter />} />\r\n                    <Route path=\"/fator-multiplicador\" element={<MultiplyingFactor />} />\r\n                    <Route path=\"/banco-de-horas\" element={<CicleBank />} />\r\n                </Routes>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default IndexPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #3A3A45;\r\n    margin-top: 30px;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    margin-top: 30px;\r\n    width: 80%; // Ajuste este valor conforme necessário\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 50%; // Ajuste este valor conforme necessário\r\n\r\n    img {\r\n        max-width: 70%;\r\n        height: auto;\r\n        object-fit: cover;\r\n        border-radius: 4px;\r\n    }\r\n`;\r\n\r\nexport const TextContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 50%; // Ajuste este valor conforme necessário\r\n    margin-left: 20px; // Adicionado para dar espaço à imagem\r\n`;\r\n\r\nexport const StyledText = styled.div`\r\n    padding: 20px;\r\n    background: #F9F9F9;\r\n    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.25);\r\n    border-radius: 4px;\r\n    color: #3A3A45;\r\n    font-size: 18px;\r\n    line-height: 1.6;\r\n    text-align: justify;\r\n\r\n    strong {\r\n        color: #3A3A45;\r\n        font-weight: 600;\r\n    }\r\n\r\n    em {\r\n        color: #3f51b5;\r\n    }\r\n\r\n    p {\r\n        margin-bottom: 10px;\r\n    }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/img.6c75f748.jpg\";","import { createGlobalStyle } from \"styled-components\";\r\nimport roboto from \"../fonts/Roboto/Roboto-Regular.ttf\";\r\n\r\nexport default createGlobalStyle`\r\n\r\n@font-face {\r\n     font-family: 'Roboto';\r\n     src: url('../fonts/Roboto/Roboto-Regular.ttf') format('truetype');\r\n     font-weight: 400;\r\n     font-style: normal;\r\n   }\r\n\r\n     * {\r\n          margin:0;\r\n          padding:0;\r\n          outline: 0;\r\n          box-sizing: border-box;  \r\n          font-family: 'Roboto', sans-serif;\r\n         \r\n     }\r\n     #root {\r\n          margin: 0 auto;\r\n     }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/Roboto-Regular.fc2b5060.ttf\";","import IndexPage from \"./pages/mainPage/index\";\r\nimport GlobalStyle from \"./styles/global\";\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <IndexPage />\r\n            <GlobalStyle />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}